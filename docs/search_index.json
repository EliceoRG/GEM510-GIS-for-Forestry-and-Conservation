[["introduction-postgresql-postgis.html", "Lab 1 Introduction to PostgreSQL and PostGIS Lab Overview Learning Objectives Deliverables Data Task 1: Set up pgAdmin and Connect to the UBC PostgreSQL server Task 2: Explore with QGIS Task 3: Explore with ArcGIS Pro Task 4: Explore with psql Shell Summary", " Lab 1 Introduction to PostgreSQL and PostGIS Written by Paul Pickell Lab Overview In this lab, you will be introduced to a Free and Open Source Software (FOSS) and widely-used database management system known as PostgreSQL. You will learn how to set up your own database, connect to an enterprise database, and write Structured Query Language (SQL) queries both from the command line and a popular postgres server admin graphical user interface. The software used in this lab includes PostgreSQL, psql, pgAdmin, and QGIS. Learning Objectives Distinguish between PostgreSQL server, PostGIS database, and layer views Practice executing SQL queries on an enterprise PostGIS database from various software interfaces Export layer views from a PostGIS database in QGIS and ArcGIS Pro Deliverables Here. Data All data for this lab are accessible via the UBC PostgreSQL server. Instructions for connecting to the server are given in the tasks below. Task 1: Set up pgAdmin and Connect to the UBC PostgreSQL server Step 1: Ensure that you are authenticated through UBC myVPN. If you are at UBC, use your dedicated ethernet port or connect via the ubcprivate wireless network. If you are away from campus, you will need to first connect to the UBC myVPN service using Cisco AnyConnect Secure Mobility Client. Only authenticated users with a Campus Wide Login (CWL) and connected to the UBC myVPN may access the UBC PostgreSQL server. Step 2: Start pgAdmin 4. This software is a a management tool for PostgreSQL databases, hence pg. Step 3: Upon starting pgAdmin, you will be prompted to set a master password. This is an important step as this master password will be used to encrypt all other passwords you use to connect to various server databases. DO NOT USE THE SAME PASSWORD AS YOU WILL USE FOR ANY DATABASE! Step 4: From the pgAdmin dashboard, click Add New Server. Step 5: Name the connection UBC PostgreSQL Server. Click the Connection tab, enter FRST-PostgreSQL.ead.ubc.ca for the Host Name, change the Username to student, and then enter the password that has been shared with the class. Leave everything else as the default, but you can choose to save the password if you want. Click Save. If the password is correct, then pgAdmin should automatically connect to the server and you will see it listed in the Browser, just expand Servers. Although the connection was automatic this time, each time you start pgAdmin, you will need to reconnect to the server after entering your master password. This is as simple as double-clicking the server name from the server list or right-click and select Connect Server. Step 6: From the Browser pane on the left, expand the ubcv connection, then expand Schemas, then expand public, then expand Tables to view all the tables in the ubcv database. Step 7: Right-click on a table and then select View/Edit Data &gt; All Rows. pgAdmin will create an SQL query and then show the result. This is one way to view the attribute table from pgAdmin. Step 8: You can also execute your own SQL query. Right-click on a table and select Query Tool. At the top, you can write any SQL query you want then click the Run button that looks like a triangle from the top ribbon. pgAdmin will return the resulting table below. Task 2: Explore with QGIS Step 1: Open QGIS. From the Browser pane on the left, right-click PostgreSQL and select New Connection. Step 2: In your Browser pane, you should now see the ubcv database connection. Expand it to see the available public schema, then expand that to see all available tables that have geometries. You can double-click any of these or click-and-drag into your empty project to view them. Step 3: Spend some time exploring the data. Open the attribute tables. View the properties and metadata. What is the EPSG code for the Coordinate Reference System (CRS) for these data? At this point, keep in mind that all the data still live on the postgres server. You may have already seen the other databases on the server. If you want to view the data in those databases, you will need to create a new database connection for each database that you want to connect to. Feel free to explore the data in the other databases, noting that what is available at any given time may be different from what you see in the screenshots in this lab. The UBC PostgreSQL server hosts many databases that are used for research and teaching! Step 4: You can also execute SQL queries in QGIS directly from the PostGIS database. From the Browser pane, right-click any available table in the PostGIS database and then select Execute SQL. In the dialogue window that opens, you will see a default SQL query that will return the first 10 features (tuples) of the selected relation. Step 5: Write an SQL query to return some subset of the data then click the Execute button. QGIS will return a preview of the attribute table for the query. From here, you can export this as a layer to view the result in the map. Expand Load as a new layer and then toggle on Column(s) with unique values and ensure the field is set to ogc_fid, this is the primary key for the table in PostGIS. Toggle on Geometry column and ensure the field is set to wbk_geometry, this is the Well Known Binary format used to represent features in PostGIS. Finally, change the Layer name to something to distinguish your query from others and then click Load layer and then Close. The result of the SQL query should now appear as a layer in your QGIS map. Note that the layer you just created does not actually exist outside your QGIS project. If you navigate into the properties of this layer, you will see the Source is simply a reference to the data that are still stored on the postgres server. This can be a really efficient way to handle data without unnecessarily copying it to a new file! Step 5: You can export any table in the PostGIS database to your local computer by right-clicking the table name in the PostGIS database and then selecting Export Layer &gt; To File. From the new dialogue window, you can configure the output file however you want. You can do the same for the query layer by right-clicking the query layer created in Step 5 and selecting Export &gt; Save Features As. Task 3: Explore with ArcGIS Pro Step 1: Start ArcGIS Pro and create a new project. Step 2: From the top ribbon, navigate to the Insert tab, then click Connections, and from the drop-down menu, select New Database Connection. Enter the database connection details in the same way that you did in the prior tasks. Once you have correctly entered the correct credentials, ArcGIS Pro will do a soft connection to the server to retrieve the available databases. From the Database drop-down menu, select ubcv and then click OK. Step 3: From the top ribbon, navigate to the Map tab, then click Add Data. From the dialogue window that opens, expand Databases, and you will see your local project geodatabase that was created when you initiated the project and the newly added postgres server. Click the postgres server connection to view the tables and then add a layer to your map. Step 4: Once you have added a layer to your map, right-click it in your Contents pane and open the properties. Again, like the query layer you created in QGIS, you will see this layer is a dynamic reference to the data on the PostGIS database. Step 5: Under Data Source, there is a Query field that includes a generic SQL query statement. Click the pencil icon on the right to open the Edit Query Layer dialogue window. This window is similar to the qeury window you used in QGIS. Enter the same query you used in Task 2 then click Validate. If the query is valid, ArcGIS Pro will allow you to click Next. Leave the Let ArcGIS Pro discover spatial properties for this layer toggled on. The next window will allow you to select the Unique Identifier Field(s), just like in QGIS. This should automatically have selected ogc_fid and automatically identified the geometry type, so you can leave everything as-is and click Finish. You will be returned to the Properties dialogue of the layer you added in your map, but you should see that the Query field has now been updated. Click OK to exit the properties and the layer in the map should now only be showing the features that match your query. Task 4: Explore with psql Shell Step 1: From your Windows search bar, search for psql and open the SQL Shell (psql) application. This will open a command prompt and allow you to interact with the PostgreSQL server directly using mostly SQL statements. The prompt should say Server [localhost]:. Type FRST-PostgreSQL.ead.ubc.ca and then hit Enter on your keyboard. The prompt should then say Database [postgres]:. Type ubcv and then press Enter on your keyboard. The prompt should then say Port [5432]:. This is the default port that the PostgreSQL server uses. Press Enter on your keyboard to accept the default port. The prompt should then say Username [postgres]:. Type student and then press Enter on your keyboard. The prompt should then ask you for the password, Password for user student:. Type the password that was shared with the class and then press Enter on your keyboard. If everything is successful, then you should see ubcv=&gt;, which indicates you can now enter either psql commands or SQL statements. (See screenshot below) Step 2: List all the available databases on the postgres server with the \\l command. If your psql window is too small, you might see -- More --. Just continue to press Enter to list more tables. You can change to any of these databases by using the \\c [database name] command like \\c postgres. Step 3: List the tables in the ubcv database with the \\dt command. You can view a full list of psql commands and their useage with the \\? command. Step 4: List all the fields for any table with the \\d [table name] command. For example, \\d ubcv_buildings. Step 5: In addition to using psql commands you can also execute SQL statements directly in the console. For example, type SELECT COUNT(*) FROM ubcv_buildings; to get a count of all the rows in a table. Notice that SELECT statements return tables, the table below has one row and one field. Step 6: You can get the unique values of any field by using the DISTINCT keyword. For example, SELECT DISTINCT green_status FROM ubcv_buildings;. Note that in this returned table, the blank space below REAP Bronze is a valid empty value for this field. Step 7: You can execute the SQL query like you did in the previous tasks, but the psql console is not ideal for wielding large tables with many fields and the formatting will not be very readable. So it is best to return only the fields that you actually need to inspect. For example, SELECT name, bldg_usage, constr_type, postal_code FROM ubcv_buildings WHERE postal_code = 'V6T 1Z1';. Some useful psql commands: \\l List all databases on the current PostgreSQL server \\c [database name] Connect or switch to any database on the PostgreSQL server \\dt List tables in the current database \\? List all psql commands \\q Quit the SQL Shell Summary You should now have a working knowledge of PostGIS databases, PostgreSQL servers, and how to connect and manage them from pgAdmin, QGIS, and ArcGIS Pro. You will continue to practice and extend these skills as nearly all data used in later labs will be accessed via the UBC PostgreSQL server. "],["analyze-relational-database.html", "Lab 2 Analyze a Relational Database Lab Overview Learning Objectives Deliverables Data Task 1: Host your own PostgreSQL Server Task 2: Create a PostGIS Database Task 3: Import Spatial Data Using GDAL Task 4: Analyze a PostGIS Database using SQL", " Lab 2 Analyze a Relational Database Written by Lab Overview In this lab you will learn how to create, manage, and analyze your own relational database. You will continue to practice with the tools that you learned in the prior lab: pgAdmin, QGIS, ArcGIS Pro, and psql. You will also be introduced to the Geospatial Data Abstraction Library (GDAL) and some of the handy programs that are available from this software library for managing data. You will learn more advanced Structured Query Language (SQL) statements that will allow you join tables, insert and update data, and analyze data in a relational database. Learning Objectives Create and host your own PostgreSQL server with a PostGIS database Apply best practices for handling, organizing, and managing data Import geospatial data using the Geospatial Data Abstraction Library (GDAL) Practice joining and relating tables Practice inserting and updating data Analyze data in a relational database using SQL Deliverables Dump SQL file from Task 2 Data Lorem ipsum Task 1: Host your own PostgreSQL Server Step 1: Open pgAdmin. Step 2: From the Browser pane on the left, right-click Servers and then select Register &gt; Server. We are going to add another server, but this time, it will be hosted on your local machine. Step 3: Name the server localhost then click the Connection tab and set the Host Name/Address also as localhost. Enter a password for the server and leave everything else as the default. When finished, click Save. The new localhost server should now appear in your Browser. You can expand it, navigate through Databases, postgres, Schemas, public, and Tables to find that it is indeed empty. Step 4: Open the psql shell. If you are already connected to the UBC PostgreSQL server, you can switch this connection to the localhost server you just made in pgAdmin with the following command: \\c \"dbname=postgres host=localhost port=5432 user=postgres\". You will then be prompted to enter your password. Alternatively, you can open a new psql terminal window. The prompt should say Server [localhost]:. Press Enter on your keyboard to accept localhost as the server host name. The prompt should then say Database [postgres]:. This is the default name of the database that was created when you hosted the server from pgAdmin. Press Enter on your keyboard to accept postgres as the database to connect to. The prompt should then say Port [5432]:. This is the default port that the PostgreSQL server uses. Press Enter on your keyboard to accept the default port. The prompt should then say Username [postgres]:. This is the default username that you created when you set up the PostgreSQL server in pgAdmin. Press Enter on your keyboard to accept the postgres username. The prompt should then ask you for your password, Password for user postgres:. Type your password and then press Enter on your keyboard. If everything is successful, then you should see postgres=#, which indicates you can now enter either psql commands or SQL statements. Note that the hashtag # indicates that you are connected to the current database with the SUPERUSER role, which is essentially the highest admin privilege. Task 2: Create a PostGIS Database Step 1: Create a new database called mypostgisdb with the following SQL command CREATE DATABASE mypostgisdb;. It is important to always escape SQL statements with a semi-colon otherwise psql will interpret your input as spanning multiple lines! If you forget the semi-colon, you can always just type it in the console and hit Enter on your keyboard and psql will interpret this as a two-line statement. Step 2: Connect to your new database by using the psql command \\c mypostgisdb. Note that this is NOT an SQL statement, so there is no need to escape the command with a semi-colon. Your console should now say mypostgisdb=#, which indicates you are now connected. Step 3: Currently this is just a plain-vanilla PostgreSQL relational database that cannot handle spatial data. In order to convert this to a PostGIS database, we need to enable the PostGIS extension using the following SQL: CREATE EXTENSION postgis;. Step 4: Listing the tables \\dt will reveal the database has a table called spatial_ref_sys. List the fields of this table with \\d spatial_ref_sys. In addition to the field names, you will see there is an index called spatial_ref_sys_pkey, which is the dedicated field for the primary key for this table, and a constraint check to ensure that srids are valid only between 1 and 998999. You can test this constraint by trying to insert a new srid value of 0: INSERT INTO spatial_ref_sys (srid) VALUES (0);. The returned message, ERROR: new row for relation &quot;spatial_ref_sys&quot; violates check constraint spatial_ref_sys_srid_check&quot; DETAIL: Failing row contains (0, null, null, null, null). DO NOT modify this table with any srids in the valid range otherwise you will need to recreate the PostGIS database! Step 5: Return the first ten rows of the table for the fields auth_name and auth_srid with SELECT auth_name,auth_srid FROM spatial_ref_sys LIMIT 10;. This table contains EPSG codes, which are used to easily relate spheroids, datums, and measurement units to geospatial data. You will find these codes used everywhere when you look at metadata and the properties of different data layers. One very commonly used code is EPSG 4326, which references the WGS 1984 datum. Step 6: Write an SQL query to return the proj4text of the WGS 1984 datum from the spatial_ref_sys table. Now we will create some new data, just to show you how to use some useful SQL keywords. We will start with aspatial data first, then move on to spatial data. You can create a new table in your database with the syntax CREATE TABLE table-name ( colunm-name-1 datatype, colunm-name-2 datatype, colunm-name-3 datatype, ... ); Data types are very important and the shorthand notation for these in PostgreSQL are listed on this web page and some commonly used data types are reproduced below with examples. Table 2.1: Some PostgreSQL data types with example value ranges. Name Description Values int2 Signed 2-byte integer -32,768 to 32,767 int4 Signed 4-byte integer -2,147,483,648 to 2,147,483,647 int8 Signed 8-byte integer -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 bigserial Autoincrementing 8-byte integer 0 to 18,446,744,073,709,551,615 float4 Single prevision floating-point number (4 bytes) ±10³8 with 6 or 7 significant digits float8 Double precision floating-point number (8 bytes) ±10³°8 with 15 or 16 significant digits bool Logical Boolean True or False char(n) Fixed length character string where n is the number of permitted characters Hello world! varchar(n) Variable length character string where n is the maximum number of permitted characters Hello world! and Hello and world and ! date Calendar date 31/12/2000 Here is an example of creating a new table with some different data types: CREATE TABLE my_new_table ( this_field_is_int2 int2, this_field_is_bool bool, this_field_is_varchar_50 varchar(50) ); You can experiment with creating as many new tables as you want. If you need to delete a table, use the DROP keyword like this DROP TABLE my_new_table;. It is good practice to assign a field (multiple fields) as a primary key when you create a table. This is done by simply adding PRIMARY KEY after the field definition when you make the table. For example: CREATE TABLE my_new_table ( this_field_is_bigserial bigserial PRIMARY KEY, this_field_is_int2 int2, this_field_is_bool bool, this_field_is_varchar_50 varchar(50) ); The bigserial data type is especially useful for this purpose because it auto-increments as you add rows and can accommodate more than 18 quintrillion rows, that is more than 18 million trillions! You can also create composite primary keys that are comprised of two or more fields to uniquely identify all rows: CREATE TABLE my_new_table ( this_field_is_int2 int2, this_field_is_bool bool, this_field_is_varchar_50 varchar(50), PRIMARY KEY(this_field_is_int2, this_field_is_bool) ); Step 7: Create a new table of assignments that are due next week. Include course code, assignment name, the percent weighting of the assignment on your final grade in that course, and the due date. Use the appropriate data types for each field and define a primary key. Now that the table and fields are defined, we will insert some data into the table. Inserting data uses the INSERT keyword followed by VALUES and then a comma-separated list of the values you want to insert in parentheses. For example: INSERT INTO my_new_table VALUES (32767, false, &#39;hello world!&#39;); If you want to insert a value for specific fields, then specify the field name(s) after the table name: INSERT INTO my_new_table (this_field_is_int2, this_field_is_varchar_50) VALUES (-32768,&#39;hi again!&#39;); If you make a mistake or need to update a field later, then you use UPDATE and SET to identify the set of fields that should be updated. You can also test for NULL (empty values) using IS NULL or IS NOT NULL: UPDATE my_new_table SET this_field_is_bool = true, this_field_is_varchar_50 = &#39;whoops!&#39; WHERE this_field_is_bool IS NULL; Dates require special handling because if you just try to insert them as strings or otherwise, they are treated as literals. For dates, we need to use the special TO_DATE function: INSERT INTO my_new_table (this_field_is_date) VALUES (TO_DATE(&#39;31-12-1963&#39;, &#39;DD-MM-YYYY&#39;)); Step 8: Now fill in your table of assignments by inserting and/or updating the values as needed. Once you are satisfied with the state of your table, you will dump your entire PostGIS database to an output SQL file and this will be one of your deliverables for this lab. PostgreSQL features a utility program called pg_dump that will take any database and output an SQL statement in a file that can be used to re-create the database. In other words, pg_dump is a backup method. This is also really handy if you want to create a local backup of a remote server! If you want more practice, try using it on the UBC PostgreSQL server. Step 9: Open a Windows command prompt (search command). Take note of your current working directory, which is probably something like C:\\Users\\[your username]. This is where your database SQL file will be saved to. To dump your database, use the following command: pg_dump -d mypostgisdb -U postgres -h localhost &gt; mypostgisdb.sql. You will be prompted to enter your password and then the new file mypostgisdb.sql will be saved in your working directory. Step 10: Check to make sure that you can load the database back into PostgreSQL. In psql, create a new empty database named mypostgisdb_backup. Then, enter the following command from the Windows command prompt: psql -U postgres -h localhost mypostgisdb_backup &lt; mypostgisdb.sql. You can now query the postgisdb_backup database to check that it is a copy of your other mypostgisdb database. Task 3: Import Spatial Data Using GDAL Now that you have some basic understanding of viewing and manipulating tables, we are going to look at some ways to import spatial data into your PostGIS database. To do this, we will be working with some utility programs in the Geospatial Data Abstraction Library (GDAL) pronounced gee-dall. You will probably find the GDAL documentation pages very helpful for reference. GDAL is used in ArcGIS, GRASS, SAGA, QGIS, ENVI, Google Earth, and also has Python bindings and an R package with bindings. In short, GDAL is largely the workhorse behind most open source geospatial software packages. Step 1: Open the OSGeo4W shell by searching for it in Windows. Enter the command o-help and inspect all the available programs. You might notice psql can be run from the OSGeo4W shell and pg_dump is also there. Some others we will cover in later labs, including pdal (Point Data Abstraction Library) pronounced poodle, which handles LiDAR data, and many of the raster and image manipulation programs. For this lab, we are going to focus on two commonly used vector programs: ogrinfo and ogr2ogr. Step 2: Type ogr2ogr --help in the console and press Enter on your keyboard. Inspect all the flags - and arguments for this program. ogr2ogr is the primary utility program for working with vector data and as you can see, there are a lot of options! To show you some of the power of this little application, we are going to export some data from the UBC PostgreSQL server to our local machine, manipulate it, and then import it to our local PostGIS database. Step 3: ogr2ogr is really useful for converting data between different formats and this is handy for exporting data out of a PostGIS database. Convert the ubcv_campus_trees table from the UBC PostgreSQL server with the following command: ogr2ogr -f &quot;ESRI Shapefile&quot; ubcv_campus_trees.shp PG:&quot;host=FRST-PostgreSQL.ead.ubc.ca user=student dbname=ubcv password=STUDENT_PASSWORD_HERE&quot; &quot;ubcv_campus_trees&quot; Replace STUDENT_PASSWORD_HERE with the password that has been shared with the class. This command tells ogr2ogr to connect to the ubcv PostGIS database on the PostgreSQL server PG:\"host=FRST-PostgreSQL.ead.ubc.ca user=student dbname=ubcv password=STUDENT_PASSWORD_HERE\", grab the table named \"ubcv_campus_trees\", and then return it to the local machine as an ESRI Shapefile -f \"ESRI Shapefile\". The file will be saved in your current working directory from the OSGeo4W shell. Step 4: You can also specify an SQL query on the input data. For example, the following command will only return the Forest Sciences Centre polygon from ubcv_buildings: ogr2ogr -where bldg_code=&#39;FSC&#39; -f &quot;ESRI Shapefile&quot; ubcv_FSC.shp PG:&quot;host=FRST-PostgreSQL.ead.ubc.ca user=student dbname=ubcv password=STUDENT_PASSWORD_HERE&quot; &quot;ubcv_buildings&quot; You can write more complex SQL statements with the -sql flag instead of -where. Step 5: Getting data into a PostGIS database is unremarkably similar as to taking it out. Import the FSC polygon into your localhost PostGIS database using the same command as Step 3, but change \"ESRI Shapefile\" to \"PostgreSQL\", modify the connection parameters for your localhost server, change \"ubcv_campus_trees\" to \"ubcv_FSC.shp\", and finally specify that we want these data reprojected into UTM Zone 10N coordinates -t_srs EPSG:3157. You will receive no feedback in the terminal if you were successful, but you can check in QGIS, ArcGIS Pro, or by using the ogrinfo program. ogrinfo is a utility that is able to read a wide-variety of spatial data formats and return metadata for inspection. This program is useful for getting the geometry type of a file, the spatial extent of the features, and the coordinate system or the datum. You can also apply SQL queries and even inspect the attributes of specific features. Step 6: Check that the FSC polygon was successfully added to your PostGIS database with the following command: ogrinfo PG:&quot;host=localhost user=postgres dbname=mypostgisdb password=YOUR_LOCALHOST_PASSWORD&quot; &quot;ubcv_FSC&quot; -so The screenshot below is a small snippet of what is returned in the OSGeo4W terminal window. As you can see, we have access to the feature count, spatial extent, Spatial Reference System (SRS), and even all the field names and data types if you scroll farther down. The -so flag gives us this summary output. Step 7: Repeat this process to import the ubcv_campus_trees.shp you created in Step 3 to your localhost PostGIS database. Task 4: Analyze a PostGIS Database using SQL Now let us have some fun and explore some of the cool spatial processing features of our PostGIS database. PostGIS supports an unfathomable number of spatial operations that you would ordinarily find in GIS software like QGIS and ArcGIS. This task is merely to give you a taste of what is possible with SQL and PostGIS. Suppose we want to know what species of trees are planted next to the Forest Sciences Centre at UBC. Step 1: Open psql and connect to your mypostgisdb database on your localhost PostgreSQL server. Step 2: Buffer the ubcv_fsc polygon with the following SQL statement: SELECT ST_Buffer(wkb_geometry, 15) INTO ubcv_fsc_buffer FROM ubcv_fsc; This statement tells PostGIS to use the buffer function ST_Buffer, which requires a geometry field wkb_geometry and a buffer distance 15 (meters in our case, because we re-projected the polygon to UTM Zone 10N in the last task), on the FSC polygon FROM ubcv_fsc, and then write the resulting buffer to a new table INTO ubcv_fsc_buffer. Step 3: Open QGIS and then add ubcv_fsc and ubc_fsc_buffer to your map to inspect them. Step 4: Step 5: "],["lab3-short-name.html", "Lab 3 Lab Title Lab Overview Learning Objectives Competencies in This Lab Deliverables Data Task 1: Lorem ipsum Task 2: Lorem ipsum", " Lab 3 Lab Title Written by Paul Pickell Lab Overview Lorem ipsum Learning Objectives Lorem ipsum Lorem ipsum Lorem ipsum Competencies in This Lab Lorem ipsum Lorem ipsum Lorem ipsum Deliverables Lorem ipsum Lorem ipsum Lorem ipsum Data Lorem ipsum Task 1: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q1. LOREM IPSUM? Q2. LOREM IPSUM? Task 2: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q3. LOREM IPSUM? Q4. LOREM IPSUM? "],["lab4-short-name.html", "Lab 4 Lab Title Lab Overview Learning Objectives Competencies in This Lab Deliverables Data Task 1: Lorem ipsum Task 2: Lorem ipsum", " Lab 4 Lab Title Written by Paul Pickell Lab Overview Lorem ipsum Learning Objectives Lorem ipsum Lorem ipsum Lorem ipsum Competencies in This Lab Lorem ipsum Lorem ipsum Lorem ipsum Deliverables Lorem ipsum Lorem ipsum Lorem ipsum Data Lorem ipsum Task 1: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q1. LOREM IPSUM? Q2. LOREM IPSUM? Task 2: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q3. LOREM IPSUM? Q4. LOREM IPSUM? "],["lab5-short-name.html", "Lab 5 Lab Title Lab Overview Learning Objectives Competencies in This Lab Deliverables Data Task 1: Lorem ipsum Task 2: Lorem ipsum", " Lab 5 Lab Title Written by Paul Pickell Lab Overview Lorem ipsum Learning Objectives Lorem ipsum Lorem ipsum Lorem ipsum Competencies in This Lab Lorem ipsum Lorem ipsum Lorem ipsum Deliverables Lorem ipsum Lorem ipsum Lorem ipsum Data Lorem ipsum Task 1: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q1. LOREM IPSUM? Q2. LOREM IPSUM? Task 2: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q3. LOREM IPSUM? Q4. LOREM IPSUM? "],["lab6-short-name.html", "Lab 6 Lab Title Lab Overview Learning Objectives Competencies in This Lab Deliverables Data Task 1: Lorem ipsum Task 2: Lorem ipsum", " Lab 6 Lab Title Written by Paul Pickell Lab Overview Lorem ipsum Learning Objectives Lorem ipsum Lorem ipsum Lorem ipsum Competencies in This Lab Lorem ipsum Lorem ipsum Lorem ipsum Deliverables Lorem ipsum Lorem ipsum Lorem ipsum Data Lorem ipsum Task 1: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q1. LOREM IPSUM? Q2. LOREM IPSUM? Task 2: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q3. LOREM IPSUM? Q4. LOREM IPSUM? "],["lab7-short-name.html", "Lab 7 Lab Title Lab Overview Learning Objectives Competencies in This Lab Deliverables Data Task 1: Lorem ipsum Task 2: Lorem ipsum", " Lab 7 Lab Title Written by Paul Pickell Lab Overview Lorem ipsum Learning Objectives Lorem ipsum Lorem ipsum Lorem ipsum Competencies in This Lab Lorem ipsum Lorem ipsum Lorem ipsum Deliverables Lorem ipsum Lorem ipsum Lorem ipsum Data Lorem ipsum Task 1: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q1. LOREM IPSUM? Q2. LOREM IPSUM? Task 2: Lorem ipsum Lorem ipsum Step 1: Lorem ipsum. Step 2: Lorem ipsum. Step 3: Lorem ipsum. HINT: Lorem ipsum. Q3. LOREM IPSUM? Q4. LOREM IPSUM? "]]
